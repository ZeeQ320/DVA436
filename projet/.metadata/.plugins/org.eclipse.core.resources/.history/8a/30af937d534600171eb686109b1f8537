/**
 */
package behaviourMM.provider;

import behaviourMM.util.BehaviourMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviourMMItemProviderAdapterFactory extends BehaviourMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviourMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.forLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected forLoopItemProvider forLoopItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.forLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createforLoopAdapter() {
		if (forLoopItemProvider == null) {
			forLoopItemProvider = new forLoopItemProvider(this);
		}

		return forLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.additionOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected additionOperatorItemProvider additionOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.additionOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createadditionOperatorAdapter() {
		if (additionOperatorItemProvider == null) {
			additionOperatorItemProvider = new additionOperatorItemProvider(this);
		}

		return additionOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.soustractionOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected soustractionOperatorItemProvider soustractionOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.soustractionOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsoustractionOperatorAdapter() {
		if (soustractionOperatorItemProvider == null) {
			soustractionOperatorItemProvider = new soustractionOperatorItemProvider(this);
		}

		return soustractionOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.multiplicationOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected multiplicationOperatorItemProvider multiplicationOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.multiplicationOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createmultiplicationOperatorAdapter() {
		if (multiplicationOperatorItemProvider == null) {
			multiplicationOperatorItemProvider = new multiplicationOperatorItemProvider(this);
		}

		return multiplicationOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.divisionOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected divisionOperatorItemProvider divisionOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.divisionOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdivisionOperatorAdapter() {
		if (divisionOperatorItemProvider == null) {
			divisionOperatorItemProvider = new divisionOperatorItemProvider(this);
		}

		return divisionOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.equalOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected equalOperatorItemProvider equalOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.equalOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createequalOperatorAdapter() {
		if (equalOperatorItemProvider == null) {
			equalOperatorItemProvider = new equalOperatorItemProvider(this);
		}

		return equalOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.inferiorOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected inferiorOperatorItemProvider inferiorOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.inferiorOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createinferiorOperatorAdapter() {
		if (inferiorOperatorItemProvider == null) {
			inferiorOperatorItemProvider = new inferiorOperatorItemProvider(this);
		}

		return inferiorOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.superiorOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected superiorOperatorItemProvider superiorOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.superiorOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsuperiorOperatorAdapter() {
		if (superiorOperatorItemProvider == null) {
			superiorOperatorItemProvider = new superiorOperatorItemProvider(this);
		}

		return superiorOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.inferiorOrEqualOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected inferiorOrEqualOperatorItemProvider inferiorOrEqualOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.inferiorOrEqualOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createinferiorOrEqualOperatorAdapter() {
		if (inferiorOrEqualOperatorItemProvider == null) {
			inferiorOrEqualOperatorItemProvider = new inferiorOrEqualOperatorItemProvider(this);
		}

		return inferiorOrEqualOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.superiorOrEqualOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected superiorOrEqualOperatorItemProvider superiorOrEqualOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.superiorOrEqualOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsuperiorOrEqualOperatorAdapter() {
		if (superiorOrEqualOperatorItemProvider == null) {
			superiorOrEqualOperatorItemProvider = new superiorOrEqualOperatorItemProvider(this);
		}

		return superiorOrEqualOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.andOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected andOperatorItemProvider andOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.andOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createandOperatorAdapter() {
		if (andOperatorItemProvider == null) {
			andOperatorItemProvider = new andOperatorItemProvider(this);
		}

		return andOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.orOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected orOperatorItemProvider orOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.orOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createorOperatorAdapter() {
		if (orOperatorItemProvider == null) {
			orOperatorItemProvider = new orOperatorItemProvider(this);
		}

		return orOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.noOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected noOperatorItemProvider noOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.noOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createnoOperatorAdapter() {
		if (noOperatorItemProvider == null) {
			noOperatorItemProvider = new noOperatorItemProvider(this);
		}

		return noOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.intVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected intVariableItemProvider intVariableItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.intVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createintVariableAdapter() {
		if (intVariableItemProvider == null) {
			intVariableItemProvider = new intVariableItemProvider(this);
		}

		return intVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.doubleVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected doubleVariableItemProvider doubleVariableItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.doubleVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdoubleVariableAdapter() {
		if (doubleVariableItemProvider == null) {
			doubleVariableItemProvider = new doubleVariableItemProvider(this);
		}

		return doubleVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.boolVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected boolVariableItemProvider boolVariableItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.boolVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createboolVariableAdapter() {
		if (boolVariableItemProvider == null) {
			boolVariableItemProvider = new boolVariableItemProvider(this);
		}

		return boolVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.charVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected charVariableItemProvider charVariableItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.charVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcharVariableAdapter() {
		if (charVariableItemProvider == null) {
			charVariableItemProvider = new charVariableItemProvider(this);
		}

		return charVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.stringVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected stringVariableItemProvider stringVariableItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.stringVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createstringVariableAdapter() {
		if (stringVariableItemProvider == null) {
			stringVariableItemProvider = new stringVariableItemProvider(this);
		}

		return stringVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.ifConditionnal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ifConditionnalItemProvider ifConditionnalItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.ifConditionnal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createifConditionnalAdapter() {
		if (ifConditionnalItemProvider == null) {
			ifConditionnalItemProvider = new ifConditionnalItemProvider(this);
		}

		return ifConditionnalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.elseConditionnal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected elseConditionnalItemProvider elseConditionnalItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.elseConditionnal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createelseConditionnalAdapter() {
		if (elseConditionnalItemProvider == null) {
			elseConditionnalItemProvider = new elseConditionnalItemProvider(this);
		}

		return elseConditionnalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.operationAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected operationAffectationItemProvider operationAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.operationAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createoperationAffectationAdapter() {
		if (operationAffectationItemProvider == null) {
			operationAffectationItemProvider = new operationAffectationItemProvider(this);
		}

		return operationAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.variableAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected variableAffectationItemProvider variableAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.variableAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createvariableAffectationAdapter() {
		if (variableAffectationItemProvider == null) {
			variableAffectationItemProvider = new variableAffectationItemProvider(this);
		}

		return variableAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.intAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected intAffectationItemProvider intAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.intAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createintAffectationAdapter() {
		if (intAffectationItemProvider == null) {
			intAffectationItemProvider = new intAffectationItemProvider(this);
		}

		return intAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.doubleAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected doubleAffectationItemProvider doubleAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.doubleAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdoubleAffectationAdapter() {
		if (doubleAffectationItemProvider == null) {
			doubleAffectationItemProvider = new doubleAffectationItemProvider(this);
		}

		return doubleAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.boolAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected boolAffectationItemProvider boolAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.boolAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createboolAffectationAdapter() {
		if (boolAffectationItemProvider == null) {
			boolAffectationItemProvider = new boolAffectationItemProvider(this);
		}

		return boolAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.charAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected charAffectationItemProvider charAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.charAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcharAffectationAdapter() {
		if (charAffectationItemProvider == null) {
			charAffectationItemProvider = new charAffectationItemProvider(this);
		}

		return charAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.stringAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected stringAffectationItemProvider stringAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.stringAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createstringAffectationAdapter() {
		if (stringAffectationItemProvider == null) {
			stringAffectationItemProvider = new stringAffectationItemProvider(this);
		}

		return stringAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.readAffectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected readAffectationItemProvider readAffectationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.readAffectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createreadAffectationAdapter() {
		if (readAffectationItemProvider == null) {
			readAffectationItemProvider = new readAffectationItemProvider(this);
		}

		return readAffectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourMM.writeConsole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected writeConsoleItemProvider writeConsoleItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourMM.writeConsole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createwriteConsoleAdapter() {
		if (writeConsoleItemProvider == null) {
			writeConsoleItemProvider = new writeConsoleItemProvider(this);
		}

		return writeConsoleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (forLoopItemProvider != null) forLoopItemProvider.dispose();
		if (additionOperatorItemProvider != null) additionOperatorItemProvider.dispose();
		if (soustractionOperatorItemProvider != null) soustractionOperatorItemProvider.dispose();
		if (multiplicationOperatorItemProvider != null) multiplicationOperatorItemProvider.dispose();
		if (divisionOperatorItemProvider != null) divisionOperatorItemProvider.dispose();
		if (equalOperatorItemProvider != null) equalOperatorItemProvider.dispose();
		if (inferiorOperatorItemProvider != null) inferiorOperatorItemProvider.dispose();
		if (superiorOperatorItemProvider != null) superiorOperatorItemProvider.dispose();
		if (inferiorOrEqualOperatorItemProvider != null) inferiorOrEqualOperatorItemProvider.dispose();
		if (superiorOrEqualOperatorItemProvider != null) superiorOrEqualOperatorItemProvider.dispose();
		if (andOperatorItemProvider != null) andOperatorItemProvider.dispose();
		if (orOperatorItemProvider != null) orOperatorItemProvider.dispose();
		if (noOperatorItemProvider != null) noOperatorItemProvider.dispose();
		if (intVariableItemProvider != null) intVariableItemProvider.dispose();
		if (doubleVariableItemProvider != null) doubleVariableItemProvider.dispose();
		if (boolVariableItemProvider != null) boolVariableItemProvider.dispose();
		if (charVariableItemProvider != null) charVariableItemProvider.dispose();
		if (stringVariableItemProvider != null) stringVariableItemProvider.dispose();
		if (ifConditionnalItemProvider != null) ifConditionnalItemProvider.dispose();
		if (elseConditionnalItemProvider != null) elseConditionnalItemProvider.dispose();
		if (operationAffectationItemProvider != null) operationAffectationItemProvider.dispose();
		if (variableAffectationItemProvider != null) variableAffectationItemProvider.dispose();
		if (intAffectationItemProvider != null) intAffectationItemProvider.dispose();
		if (doubleAffectationItemProvider != null) doubleAffectationItemProvider.dispose();
		if (boolAffectationItemProvider != null) boolAffectationItemProvider.dispose();
		if (charAffectationItemProvider != null) charAffectationItemProvider.dispose();
		if (stringAffectationItemProvider != null) stringAffectationItemProvider.dispose();
		if (readAffectationItemProvider != null) readAffectationItemProvider.dispose();
		if (writeConsoleItemProvider != null) writeConsoleItemProvider.dispose();
	}

}
